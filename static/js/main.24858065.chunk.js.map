{"version":3,"sources":["GameBoardComponent.js","App.js","serviceWorker.js","index.js"],"names":["GameBoardDisplay","props","inputAreas","boardData","counter","i","j","color","Math","floor","inputVal","styleName","push","key","id","className","type","value","onChange","e","inputHandler","length","SudokuGenerator","require","App","state","gameBoardData","presetBoardData","solutionBoardData","bind","initGameBoard","generate","generatedGameBoard","generatedBoards","easySheet","getSheet","tempBoardData","tempPresetData","tempColBoard","tempColPreset","this","setState","board","yPos","xPos","gameBoard","val","parseInt","Number","isNaN","xPosOfCellStart","yPosOfCellStart","tempXPos","tempYPos","solutionBoard","event","persist","validSudokuMove","target","checkSolution","alert","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oTAiCeA,MA/Bf,SAA0BC,GAEtB,IAAIC,EAAa,GAEjB,GAAsB,MAAnBD,EAAME,UAEL,IADA,IAAIC,EAAU,EADS,WAEfC,GACJ,IAHmB,eAGXC,GAEJ,IAGIC,GAHIC,KAAKC,MAAMH,EAAE,GACbE,KAAKC,MAAMJ,EAAE,IAEC,IAAM,EAAI,UAAY,WAExCK,EAAWT,EAAME,UAAUE,GAAGC,GAAKL,EAAME,UAAUE,GAAGC,GAAK,GAC3DK,EAAY,YAAcJ,EAC9BL,EAAWU,KAAK,2BAAOC,IAAKT,EAASU,GAAIV,IAAWW,UAAWJ,EAAWK,KAAK,OAAOC,MAAOP,EAAUQ,SAAU,SAACC,GAAD,OAAOlB,EAAMmB,aAAaf,EAAGC,EAAGa,QAT7Ib,EAAI,EAAGA,EAAIL,EAAME,UAAUkB,OAAQf,IAAK,EAAxCA,IADJD,EAAI,EAAGA,EAAIJ,EAAME,UAAUkB,OAAQhB,IAAK,EAAxCA,GAeZ,OACI,6BACI,yBAAKU,UAAU,aACVb,KCtBXoB,EAAkBC,EAAQ,IAAuBD,gBAqIxCE,E,kDAlIX,WAAYvB,GAAO,IAAD,8BACd,cAAMA,IAEDwB,MAAQ,CACTC,cAAe,GACfC,gBAAiB,GACjBC,kBAAmB,IAGvB,EAAKR,aAAe,EAAKA,aAAaS,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBAVP,E,4DAcdP,EAAgBS,SAAS,GAOzB,IANA,IAAIC,EAAqBV,EAAgBW,gBAAgB,GACrDC,EAAYF,EAAmBG,SAAS,GAExCC,EAAgB,GAChBC,EAAiB,GAEbhC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CAGtB,IAFA,IAAIiC,EAAe,GACfC,EAAgB,GACZjC,EAAI,EAAGA,EAAI,EAAGA,IACI,IAAnB4B,EAAU7B,GAAGC,IACZgC,EAAa1B,KAAKsB,EAAU7B,GAAGC,IAC/BiC,EAAc3B,KAAK,KAEnB0B,EAAa1B,KAAK,MAClB2B,EAAc3B,KAAK,IAG3BwB,EAAcxB,KAAK0B,GACnBD,EAAezB,KAAK2B,GAGxBC,KAAKC,SAAS,CACVf,cAAeU,EACfT,gBAAiBU,EACjBT,kBAAmBI,EAAmBU,U,sCAK9BC,EAAMC,EAAMC,EAAWC,GAEnC,GAAU,IAAPA,EAAW,OAAO,EAIrB,GADAA,EAAMC,SAASD,GACZE,OAAOC,MAAMH,GAAM,OAAO,EAC7B,GAAGA,EAAM,GAAKA,EAAMD,EAAUxB,OAAQ,OAAO,EAG7C,IAAI,IAAIhB,EAAI,EAAGA,EAAIwC,EAAU,GAAGxB,OAAQhB,IACpC,GAAGwC,EAAUF,GAAMtC,IAAMyC,GAAOF,GAAQvC,EACpC,OAAO,EAGf,IAAI,IAAIA,EAAI,EAAGA,EAAIwC,EAAUxB,OAAQhB,IACjC,GAAGwC,EAAUxC,GAAGuC,IAASE,GAAOH,GAAQtC,EACpC,OAAO,EAKf,IAFA,IAAI6C,EAAuC,EAArB1C,KAAKC,MAAMmC,EAAK,GAClCO,EAAuC,EAArB3C,KAAKC,MAAMkC,EAAK,GAC9BtC,EAAI,EAAGA,EAAI,EAAGA,IAClB,IAAI,IAAIC,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACtB,IAAI8C,EAAWF,EAAkB5C,EAC7B+C,EAAWF,EAAkB9C,EACjC,GAAGwC,EAAUQ,GAAUD,IAAaN,IAC3BM,GAAYR,GAAQS,GAAYV,GACrC,OAAO,EAInB,OAAO,I,oCAGGE,EAAWS,GACrB,IAAI,IAAIjD,EAAI,EAAGA,EAAIiD,EAAcjC,OAAQhB,IACrC,IAAI,IAAIC,EAAI,EAAGA,EAAIgD,EAAc,GAAGjC,OAAQf,IACxC,GAAGyC,SAASF,EAAUxC,GAAGC,MAAQgD,EAAcjD,GAAGC,GAC9C,OAAO,EAInB,OAAO,I,mCAGEqC,EAAMC,EAAMW,GACrBA,EAAMC,UAGuC,GAA1ChB,KAAKf,MAAME,gBAAgBgB,GAAMC,KAC7BJ,KAAKiB,gBAAgBd,EAAMC,EAAMJ,KAAKf,MAAMC,cAAe6B,EAAMG,OAAOzC,OACvEuB,KAAKC,UAAS,SAAShB,EAAOxB,GAC1B,IAAImC,EAAgBI,KAAKf,MAAMC,cAM/B,OALAU,EAAcO,GAAMC,GAAQW,EAAMG,OAAOzC,MAEtCuB,KAAKmB,cAAcvB,EAAeI,KAAKf,MAAMG,oBAC5CgC,MAAM,cAEH,CAAClC,cAAeU,MAI3BwB,MAAM,mB,0CAKdpB,KAAKV,kB,+BAGL,OACI,yBAAKf,UAAU,WACX,uBAAGA,UAAU,cAAb,UACA,6BACA,kBAAC,EAAD,CAAkBZ,UAAWqC,KAAKf,MAAMC,cAAeN,aAAcoB,KAAKpB,eAC1E,6BACA,4BAAQL,UAAU,gBAAgB8C,QAASrB,KAAKV,eAAhD,mB,GA3HEgC,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.24858065.chunk.js","sourcesContent":["import React from 'react';\n\nfunction GameBoardDisplay(props){\n\n    let inputAreas = [];\n\n    if(props.boardData != null){\n        let counter = 0;\n        for(let i = 0; i < props.boardData.length; i++){\n            for(let j = 0; j < props.boardData.length; j++){\n                /*determines background color of square*/\n                let x = Math.floor(j/3);\n                let y = Math.floor(i/3);\n                /* even number cells are gray, odd are white */\n                let color = (x + y) % 2 === 0 ? \"grayBox\" : \"whiteBox\";\n\n                let inputVal = props.boardData[i][j] ? props.boardData[i][j] : \"\";\n                let styleName = \"inputBox \" + color;\n                inputAreas.push(<input key={counter} id={counter++} className={styleName} type=\"text\" value={inputVal} onChange={(e) => props.inputHandler(i, j, e)}/>);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"gameBoard\">\n                {inputAreas}\n            </div>\n        </div>\n\n    );\n}\n\nexport default GameBoardDisplay;\n","import React from 'react';\nimport './App.css';\nimport './GameBoardComponent.css';\nimport GameBoardDisplay from './GameBoardComponent.js';\nconst SudokuGenerator = require(\"js-sudoku-generator\").SudokuGenerator;\n\nclass App extends React.Component{\n    constructor(props){\n        super(props);\n        /* preset board stores position of starting puzzle elements, which are immutable */\n        this.state = {\n            gameBoardData: [],\n            presetBoardData: [],\n            solutionBoardData: []\n        };\n\n        this.inputHandler = this.inputHandler.bind(this);\n        this.initGameBoard = this.initGameBoard.bind(this);\n    }\n\n    initGameBoard(){\n        SudokuGenerator.generate(1);\n        let generatedGameBoard = SudokuGenerator.generatedBoards[0];\n        let easySheet = generatedGameBoard.getSheet(0);\n\n        let tempBoardData = [];\n        let tempPresetData = [];\n\n        for(let i = 0; i < 9; i++){\n            let tempColBoard = [];\n            let tempColPreset = [];\n            for(let j = 0; j < 9; j++)\n                if(easySheet[i][j] != \"\"){\n                    tempColBoard.push(easySheet[i][j]);\n                    tempColPreset.push(1);\n                }else{\n                    tempColBoard.push(null);\n                    tempColPreset.push(0);\n                }\n\n            tempBoardData.push(tempColBoard);\n            tempPresetData.push(tempColPreset);\n        }\n\n        this.setState({\n            gameBoardData: tempBoardData,\n            presetBoardData: tempPresetData,\n            solutionBoardData: generatedGameBoard.board\n        });\n    }\n\n    /* checks whether move is coherent with rest of game board */\n    validSudokuMove(yPos, xPos, gameBoard, val){\n        //if player is deleting a value, its always coherent with board\n        if(val == \"\") return true;\n\n        //checks if val is number and within bounds\n        val = parseInt(val);\n        if(Number.isNaN(val)) return false;\n        if(val < 0 || val > gameBoard.length) return false;\n\n        //checks row val is on for repeats\n        for(let i = 0; i < gameBoard[0].length; i++)\n            if(gameBoard[yPos][i] == val && xPos != i)\n                return false;\n\n        //checks col for repeats\n        for(let i = 0; i < gameBoard.length; i++)\n            if(gameBoard[i][xPos] == val && yPos != i)\n                return false;\n\n        //checks respective 3x3 squre for repeats\n        let xPosOfCellStart = Math.floor(xPos/3) * 3;\n        let yPosOfCellStart = Math.floor(yPos/3) * 3;\n        for(let i = 0; i < 3; i++){\n            for(let j = 0; j < 3; j++){\n                let tempXPos = xPosOfCellStart + j;\n                let tempYPos = yPosOfCellStart + i\n                if(gameBoard[tempYPos][tempXPos] == val\n                    && !(tempXPos == xPos && tempYPos == yPos))\n                    return false;\n            }\n        }\n\n        return true;\n    }\n\n    checkSolution(gameBoard, solutionBoard){\n        for(let i = 0; i < solutionBoard.length; i++){\n            for(let j = 0; j < solutionBoard[0].length; j++){\n                if(parseInt(gameBoard[i][j]) !== solutionBoard[i][j])\n                    return false;\n            }\n        }\n\n        return true;\n    }\n\n    inputHandler(yPos, xPos, event){\n        event.persist();\n\n        //if space prefilled\n        if(this.state.presetBoardData[yPos][xPos] == 0){\n            if(this.validSudokuMove(yPos, xPos, this.state.gameBoardData, event.target.value)){\n                this.setState(function(state, props){\n                    let tempBoardData = this.state.gameBoardData;\n                    tempBoardData[yPos][xPos] = event.target.value;\n\n                    if(this.checkSolution(tempBoardData, this.state.solutionBoardData))\n                        alert(\"Completed!\");\n\n                    return {gameBoardData: tempBoardData};\n                });\n            }\n            else{\n                alert(\"invalid move\");\n            }\n        }\n    }\n    componentDidMount(){\n        this.initGameBoard();\n    }\n    render(){\n        return (\n            <div className=\"content\">\n                <h className=\"mainHeader\">Sudoku</h>\n                <br/>\n                <GameBoardDisplay boardData={this.state.gameBoardData} inputHandler={this.inputHandler}/>\n                <br/>\n                <button className=\"newGameButton\" onClick={this.initGameBoard}> New Game </button>\n\n            </div>\n        );\n\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}